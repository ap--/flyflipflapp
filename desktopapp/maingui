#!/usr/bin/env python
#

import yaml
import os
import threading

from gi.repository import Gtk, GLib, GObject, Gdk

import datetime
import time

GObject.threads_init()
Gdk.threads_init()


class UI:

    ALLELESCONF = '../alleles.yaml'
    TIMEFMT = '%Y-%m-%d %H:%M'

    def __init__(self):
        # GTK3 stuff
        b = Gtk.Builder()
        guifile = 'main.ui'
        b.add_from_file(guifile)
        b.connect_signals(self)
        self.w = b.get_object("window1")
        
        # get Buttons
        self._button_now = b.get_object("nowbutton")
        self._button_add = b.get_object("addbutton")
        self._button_clear = b.get_object("clearbutton")
        
        # get fly grids
        self._grid_fly0 = b.get_object("fly0grid")
        self._grid_fly1 = b.get_object("fly1grid")

        # get type selector and dateentry
        self._cbox_tubetype = b.get_object("tubetypecbox")
        self._entry_date = b.get_object("dateentry")
        
        # get fly0 stuff
        self._fly0_hc1 = b.get_object("fly0hc1")
        self._fly0_hc2 = b.get_object("fly0hc2")
        self._fly0_hc3 = b.get_object("fly0hc3")
        self._fly0_c1a = b.get_object("fly0c1a")
        self._fly0_c1b = b.get_object("fly0c1b")
        self._fly0_c2a = b.get_object("fly0c2a")
        self._fly0_c2b = b.get_object("fly0c2b")
        self._fly0_c3a = b.get_object("fly0c3a")
        self._fly0_c3b = b.get_object("fly0c3b")
        self._fly0_gen = b.get_object("fly0gender") 
        self._fly1_gen = b.get_object("fly1gender") 
        
        # get fly1 stuff
        self._fly1_hc1 = b.get_object("fly1hc1")
        self._fly1_hc2 = b.get_object("fly1hc2")
        self._fly1_hc3 = b.get_object("fly1hc3")
        self._fly1_c1a = b.get_object("fly1c1a")
        self._fly1_c1b = b.get_object("fly1c1b")
        self._fly1_c2a = b.get_object("fly1c2a")
        self._fly1_c2b = b.get_object("fly1c2b")
        self._fly1_c3a = b.get_object("fly1c3a")
        self._fly1_c3b = b.get_object("fly1c3b")
       
        # connect all signals:
        self.w.connect("delete-event", self._request_close)

        self._fly0_hc1.connect("clicked", self._changed_homozygous, self._fly0_c1b)
        self._fly0_hc2.connect("clicked", self._changed_homozygous, self._fly0_c2b)
        self._fly0_hc3.connect("clicked", self._changed_homozygous, self._fly0_c3b)
        self._fly1_hc1.connect("clicked", self._changed_homozygous, self._fly1_c1b)
        self._fly1_hc2.connect("clicked", self._changed_homozygous, self._fly1_c2b)
        self._fly1_hc3.connect("clicked", self._changed_homozygous, self._fly1_c3b)

        self._cbox_tubetype.connect("changed", self._changed_tubetype)

        self._entry_date.connect("changed", self._changed_date)

        self._button_now.connect("clicked", self._clicked_now, self._entry_date)
        self._button_clear.connect("clicked", self._clicked_clear)

        self._grid_fly0.set_sensitive(False)
        self._grid_fly1.set_sensitive(False)

        self._setup_alleles(self.ALLELESCONF)
        self._setup_genders()
        # done
        self.w.show_all()


    def _changed_homozygous(self, checkbutton, combobox):
        MODC1 = not checkbutton.get_active()
        combobox.set_sensitive(MODC1)
        return True


    def _changed_tubetype(self, combobox):
        typ = combobox.get_model().get_value(combobox.get_active_iter(),0)
        if typ == 'Stock':
            self._grid_fly0.set_sensitive(True)
            self._grid_fly1.set_sensitive(False)
        elif typ == 'Cross':
            self._grid_fly0.set_sensitive(True)
            self._grid_fly1.set_sensitive(True)
        return True


    def _changed_date(self, entry):
        string = entry.get_text()
        try:
            datetime.datetime.strptime(string.strip(), self.TIMEFMT)
        except ValueError:
            entry.set_icon_from_stock(
                    Gtk.EntryIconPosition.PRIMARY, Gtk.STOCK_DIALOG_ERROR)
        else:
            entry.set_icon_from_stock(
                    Gtk.EntryIconPosition.PRIMARY, Gtk.STOCK_APPLY)
        return True


    def _clicked_now(self, button, entry):
        t = datetime.datetime.now().strftime(self.TIMEFMT)
        entry.set_text(t)
        return True


    def _clicked_clear(self, button, fly=-1):
        H0 = [self._fly0_hc1, self._fly0_hc2, self._fly0_hc3]
        H1 = [self._fly1_hc1, self._fly1_hc2, self._fly1_hc3]
        C0 = [self._fly0_c1a, self._fly0_c1b, self._fly0_c2a,
              self._fly0_c2b, self._fly0_c3a, self._fly0_c3b]
        C1 = [self._fly1_c1a, self._fly1_c1b, self._fly1_c2a,
              self._fly1_c2b, self._fly1_c3a, self._fly1_c3b]
        if fly < 0 or fly == 0:
            for h in H0:
                h.set_active(False)
            for c in C0:
                c.set_active(-1)
        if fly < 0 or fly == 1:
            for h in H1:
                h.set_active(False)
            for c in C1:
                c.set_active(-1)
        return True


    def _setup_alleles(self, configfile):
        alleles = yaml.load(open(configfile,'r'))
        C1 = [self._fly0_c1a, self._fly0_c1b, self._fly1_c1a, self._fly1_c1b]
        C2 = [self._fly0_c2a, self._fly0_c2b, self._fly1_c2a, self._fly1_c2b]
        C3 = [self._fly0_c3a, self._fly0_c3b, self._fly1_c3a, self._fly1_c3b]
        KS = ['chromosome1', 'chromosome2', 'chromosome3']
        for k, cbs in zip(KS, [C1, C2, C3]):
            ls = Gtk.ListStore(str)
            cell = Gtk.CellRendererText()
            for allele in alleles[k]:
                ls.append([allele])
            for cb in cbs:
                cb.set_model(ls)
                cb.set_active(-1)
                cb.pack_start(cell, True)
                cb.add_attribute(cell, "text", 0)
        return         


    def _setup_genders(self):
        ls = Gtk.ListStore(str)
        ls.append([u'\u2640'])
        ls.append([u'\u2642'])
        ls.append([u'\u263f'])
        cell = Gtk.CellRendererText()
        for cb in [self._fly0_gen, self._fly1_gen]:
            cb.set_model(ls)
            cb.set_active(-1)
            cb.pack_start(cell, True)
            cb.add_attribute(cell, "text", 0)
        return


    def _request_close(self, *args):
        Gtk.main_quit()


    def start(self):
        Gtk.main()


if __name__ == "__main__":

    u = UI()
    u.start()
